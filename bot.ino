#include <WiFi.h>
#include <GyverHTTP.h>
#include <GSON.h>
#include <FastBot2.h>

#define FB_NO_FILE          // —É–±—Ä–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
#define WIFI_SSID "wifi ssid"
#define WIFI_PASS "wifi pass"
#define BOT_TOKEN "telegram token"
#define CHAT_ID "1234678910" // –ø–µ—Ä–≤—ã–π id –∞–¥–º–∏–Ω–∞
#define CHAT_ID_L "1251201935" // –≤—Ç–æ—Ä–æ–π id –∞–¥–º–∏–Ω–∞
#define OPENWEATHER_API_KEY "api key"


FastBot2 bot;

// –°–æ–∑–¥–∞—ë–º WiFi –∫–ª–∏–µ–Ω—Ç –¥–ª—è HTTPS
WiFiClientSecure client;

// custom header collector
class Collector : public ghttp::HeadersCollector {
   public:
    void header(Text& name, Text& value) {
        Serial.print(name);
        Serial.print(": ");
        Serial.println(value);
    }
};

// GyverHTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenWeatherMap API
ghttp::Client http(client, "api.openweathermap.org", 443);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
String getWeather(String CITY) {
    client.setInsecure();
    String weatherData;

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞
    String url = "/data/2.5/weather?q=" + CITY + "&appid=" + OPENWEATHER_API_KEY + "&units=metric";

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    http.request(url, "GET");

    // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    while (!http.available()) {
        http.tick();
    }


    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    Collector collector;
    ghttp::Client::Response resp = http.getResponse(&collector);

    if (resp.code() == 200) {  // HTTP 200 OK
        // –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É
        String responseBody;
        while (resp.body().available()) {
            responseBody += (char)resp.body().read();
        }

        // –ü–∞—Ä—Å–∏–º JSON —á–µ—Ä–µ–∑ GSON
        gson::Parser parser(10);
        parser.parse(responseBody);

        if (!parser.has(F("main")) || !parser[F("main")].has(F("temp")) ||
            !parser.has(F("weather")) || !parser[F("weather")][0].has(F("description"))) {
            weatherData = "Error parsing weather data.";
            return weatherData;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∫–∞–∫ float –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
        float tempFloat = (float)parser[F("main")][F("temp")];
        int temp = (int)tempFloat;  // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞

        String description = (String)parser[F("weather")][0][F("description")];

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –ø–æ–≥–æ–¥–æ–π
        weatherData = "<b>City:</b> " + CITY +
                      "\n<b>Temperature:</b> " + String(temp) + "¬∞C" +
                      "\n<b>Description:</b> " + description;
    } else {
        weatherData = "Error fetching weather: HTTP code " + String(resp.code());
    }

    return weatherData;
}

void updateh(fb::Update& u) {
  Text user_id = u.message().from().id();
  if (user_id != CHAT_ID && user_id != CHAT_ID_L) return;

  Text chat_id = u.message().chat().id();
  fb::Message msg;
  msg.mode = fb::Message::Mode::HTML;
  msg.chatID = chat_id;

  // CallbackQuery - –æ—Ç–≤–µ—Ç—ã –Ω–µ –∫–Ω–æ–ø–∫–∏
  if (u.isQuery()) {
    bot.answerCallbackQuery(u.query().id(), "‚úÖ –£—Å–ø–µ—à–Ω–æ");
    // –ø—Ä–∏–º–µ—Ä —Å —Ä–∞–∑–±–æ—Ä–æ–º callback query —á–µ—Ä–µ–∑ —Ö—ç—à
    switch (u.query().data().hash()) {
      case SH("test"): {
        msg.text ="Test answer";
        bot.sendMessage(msg);
        } break;
      
      default: return;
    }
  }
  // —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (u.isMessage()) {
      fb::Result setTyping(Value chat_id, bool wait = true);

      String text = u.message().text().decodeUnicode();
      if (text == "/start") {
          fb::MyCommands commands(
            "start;menu;help;settings",
            "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ üöÄ;–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ò∞;–ü–æ–º–æ—â—å ‚ùì;–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"
          );
          bot.setMyCommands(commands);

          msg.text = F(
              "<b>–ü–æ–º–æ—â—å:</b>\r\n"
              "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ üöÄ\r\n"
              "/quote - –§—Ä–∞–∑–∞ –¥–Ω—è\r\n"
              "/temp - –ü–æ–≥–æ–¥–∞ \r\n"
              "/menu -  –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚≠ê\r\n"
              "/send_inline_menu - –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é\r\n"
          );
          msg.removeMenu();
          bot.sendMessage(msg);
      } else if (text == "/help") {
          msg.text = F(
              "<b>–ü–æ–º–æ—â—å:</b>\r\n"
              "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ üöÄ\r\n"
              "/quote - –§—Ä–∞–∑–∞ –¥–Ω—è\r\n"
              "/menu -  –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚≠ê\r\n"
              "/send_inline_menu - –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é\r\n"
          );
          msg.removeMenu();
          bot.sendMessage(msg);
      } else if (text == "/quote") { // –¥–ª—è –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ñ—Ä–∞–∑—ã
          msg.text = "<b>–ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç</b>";
          bot.sendMessage(msg);
      } else if (text == "/menu") {
          msg.text = "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>";

          // –º–µ–Ω—é, –¥–ª—è –∫–Ω–æ–ø–æ–∫ - \n-—Ä–∞–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ç—Ä–æ–∫, ;-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
          fb::Menu menu;
          menu.text = "–ü–æ–≥–æ–¥–∞ üå§Ô∏è\n–°—á–µ—Ç—á–∏–∫–∏ üî¢\n–°–≤–µ—Ç üí°";
          menu.resize = 1;
          menu.placeholder = "üëá –í—ã–±–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏—é üëá";
          msg.setMenu(menu);

          bot.sendMessage(msg);
      } else if (text == "/send_inline_menu") {
          msg.text = "<b>–ò–Ω–ª–∞–π–Ω –º–µ–Ω—é</b>";
          fb::InlineMenu menu(
              "kb 1 ; kb 2 ; kb 3 \n kb 4 ; kb 5",
              "test;pest;lol;https://www.google.ru/;https://www.yandex.ru/"
          );
          msg.setInlineMenu(menu);

          bot.sendMessage(msg);
      } else if (text == "/temp" || text == "–ü–æ–≥–æ–¥–∞ üå§Ô∏è") {
          String weather = getWeather("Astana"); // –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–≥–æ–¥—ã
          msg.text = weather;
          bot.sendMessage(msg);
      } else if (text == "/close") {
          msg.text = "<b>‚≠ï –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!</b>";
          msg.removeMenu();
          bot.sendMessage(msg);
      } else {
          msg.text = "<b>üö´ –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!</b>\n\n"+text;
          msg.removeMenu();
          bot.sendMessage(msg);
      }
  }
}

void setup() {
    // ==============
    Serial.begin(115200);
    Serial.println();

    WiFi.begin(WIFI_SSID, WIFI_PASS);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("Connected");
    
    // Set your timezone
    configTime(0, 0, "pool.ntp.org");

    // ==============
    // attach
    bot.attachUpdate(updateh);   // –ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π

    // —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—É—Å–∫–∞
    bot.setToken(BOT_TOKEN);
    // –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    bot.skipUpdates();
    // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ 4000-Default
    bot.setPollMode(fb::Poll::Long, 4000);
    
    // —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.sendMessage(fb::Message("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!", CHAT_ID));
}

void loop() {
    bot.tick();
}
